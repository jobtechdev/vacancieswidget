/* 
* jQuery slider v1.0.0
* Copyright 2012, Logica AB
* Kristoffer Lundberg (kristoffer.lundberg@logica.com)
*
*/

(function ($) {

    var pluginName = 'slider';
    var pluginOptions = {
        prev: '.' + pluginName + '-prev',
        next: '.' + pluginName + '-next',
        pause: '.' + pluginName + '-pause',
        pager: '.' + pluginName + '-pager',
        fx: 'fade',
        width: 'auto',
        height: 'auto',
        activeClass: pluginName + '-active',
        changingClass: pluginName + '-changing',
        slideClass: pluginName + '-slide',
        pagerClass: pluginName + '-pager',
        slideInnerClass: pluginName + '-slide-inner',
        slideTextClass: pluginName + '-slide-tooltip',
        startAt: 0,
        speed: 1000,
        interval: 4000,
        autoplay: true,
        pauseOnHover: true,
        before: function (e, o, i) { },
        after: function (e, o, i) { }
    };

    $.fn[pluginName] = function (o) {
        return this.each(function () {

            // Already initialized
            if (this[pluginName])
                return this;
            this[pluginName] = true;

            // Declare variables
            var timeout = null,
                element = $(this),
                busy = false,
                wrapper = element.wrap('<div />').parent(),
                options = $.extend(pluginOptions, o || {}),
                slides = getSlides(),
                pager = $(options.pager),
                prevBtn = $(options.prev),
                nextBtn = $(options.next),
                pauseBtn = $(options.pause),
                width = getWidth(),
                height = getHeight(),
                current = options.startAt;

            // Set attributes and event for wrapper
            wrapper.addClass(pluginName + '-wrapper');
            wrapper.addClass(pluginName + '-' + options.fx);
            wrapper.bind('mouseover.' + pluginName, stop);
            wrapper.bind('mouseout.' + pluginName, restart);

            // Bind event for pager
            pager.addClass(options.pagerClass);
            pager.find('a').bind('click.' + pluginName, function (e) {
                e.preventDefault();
                if (busy)
                    return;

                var index = parseInt($(this).attr('data-index'), 10);
                var slide = $(slides[index]);
                if (slide.length != 0 && index != current) {

                    current = index;
                    changeTo(slide, true);
                    restart();
                }
            });

            // Bind event for previous
            prevBtn.unbind('click.' + pluginName).bind('click.' + pluginName, function (e) {
                e.preventDefault();
                if (busy)
                    return;
                prev();
                restart();
            });

            // Bind event for next
            nextBtn.unbind('click.' + pluginName).bind('click.' + pluginName, function (e) {
                e.preventDefault();
                if (busy)
                    return;
                next();
                restart();
            });

            // Bind event for pause
            if (!options.autoplay)
                pauseBtn.addClass(options.activeClass);
            pauseBtn.unbind('click.' + pluginName).bind('click.' + pluginName, function (e) {
                e.preventDefault();
                if (busy)
                    return;
                
                if (options.autoplay) {
                    options.autoplay = false;
                    pauseBtn.addClass(options.activeClass);
                    stop();

                } else {
                    options.autoplay = true;
                    pauseBtn.removeClass(options.activeClass);
                    restart();
                }
            });

            // Bind event for resizing
            setNewProportions();
            $(window).bind('resize.' + pluginName, function () {
                setNewProportions();
            });

            // Gets lowest width for all slides
            function getWidth() {
                if (options.width != 'auto')
                    return options.width;

                var value = 0;
                slides.each(function () {
                    var img = $(this).find('img');
                    if (img.length != 0 && (img.width() < value || value == 0))
                        value = img.width();
                });

                return value;
            }

            // Gets lowest height for all slides
            function getHeight() {
                if (options.height != 'auto')
                    return options.height;

                var value = 0;
                slides.each(function () {
                    var img = $(this).find('img');
                    if (img.length != 0 && (img.height() < value || value == 0))
                        value = img.height();
                });

                return value;
            }

            function setNewProportions() {
                // Must be set to auto so we can get new values
                slides.find('.' + options.slideInnerClass).css('width', '100%');
                slides.find('.' + options.slideInnerClass).css('height', 'auto');
                if (options.fx == 'scroll')
                    element.css('width', 'auto');

                // Get new width and height
                width = getWidth();
                height = getHeight();

                // Set width and height
                if (options.width != 'none' && width != 0) {
                    slides.find('.' + options.slideInnerClass).css('width', width);

                    // Also set elements width of total width for all slides
                    if (options.fx == 'scroll') {
                        element.css('width', width * slides.length);
                        changeTo($(slides[current]), false);
                    }
                }

                if (options.height != 'none' && height != 0)
                    slides.find('.' + options.slideInnerClass).css('height', height);
            }

            // Wrap all images into slides
            function getSlides() {
                return $($.map(element.find('img'), function (v, i) {
                    var wrapper;
                    var image = $(v);
                    var title = $(v).attr('title');

                    image.removeAttr('title');
                    if (image.parent('a').length != 0)
                        image = image.parent('a');
                    wrapper = image.wrap('<div class="' + options.slideInnerClass + '" />').parent();
                    wrapper = wrapper.wrap('<div class="' + options.slideClass + '" />').parent();

                    // If slide description is defined
                    if (title != null && title != '') {
                        if (title.indexOf('#') == 0)
                            title = $(title).html();
                        wrapper.append('<div class="' + options.slideTextClass + '">' + title + '</div>');
                    }

                    // Return slide
                    return wrapper[0];
                }));
            }

            // Do the change
            function changeTo(slide, animate) {
                options.before(slide, options, current);
                switch (options.fx) {
                    case 'scroll':
                        slides.removeClass(options.activeClass);
                        slide.addClass(options.activeClass);

                        if (animate) {
                            busy = true;
                            element.animate({ left: current * width * -1 }, 500, function () {
                                busy = false;
                            });

                        } else {
                            element.css('left', current * width * -1);
                        }

                    case 'fade':
                        if (animate) {
                            busy = true;
                            slide.addClass(options.changingClass);
                            slide.animate({ opacity: 1 }, 500, function () {
                                busy = false;
                                slides.removeClass(options.activeClass);
                                slide.removeClass(options.changingClass);
                                slide.addClass(options.activeClass);
                                slide.css('opacity', '');
                            });

                        } else {
                            slides.removeClass(options.activeClass);
                            slide.addClass(options.activeClass);
                        }
                }

                $(options.pager).find('a')
                    .removeClass(options.activeClass);
                $(options.pager).find('a[data-index=' + current + ']')
                    .addClass(options.activeClass);
                options.after(slide, options, current);
            }

            // Change to previous slide
            function prev() {
                current -= 1;
                current = current < 0 ? slides.length - 1 : current;

                var animate = slides.length > 1;
                var slide = $(slides[current]);
                if (slide.length != 0)
                    changeTo(slide, animate);
            }

            // Change to next slide
            function next() {
                current += 1;
                current = current > slides.length - 1 ? 0 : current;

                var animate = slides.length > 1;
                var slide = $(slides[current]);
                if (slide.length != 0)
                    changeTo(slide, animate);
            }

            // Restart slideshow
            function restart() {
                stop();

                if (options.autoplay)
                    play();
            }

            // Start slideshow
            function play() {
                timeout = setInterval(next, options.interval);
            }

            // Pause slideshow
            function stop() {
                clearInterval(timeout);
                timeout = null;
            }

            // If another slide then 0 is set as default
            var slide = $(slides[current]);
            if (slide.length != 0) {
                changeTo(slide, false);

            } else {
                current = 0;
                changeTo($(slides[0]), false);
            }

            // Autoplay
            if (options.autoplay)
                play();
        });
    }

})(jQuery);